#!/usr/bin/env python
# -*- coding: utf-8 -*-

from io import BytesIO
import operator
import re
import copy
import os

ALL_CONFIG_NAME = "GameConfigs"

INDENT = ''
INDENT_LEN = len(INDENT)

_files = {}

def type_name():
    return 'lua'

def my_path():
    return '/config/gameconfig'

def my_suffix():
    return 'lua'

def active():
    return True

def dev_folder_rel():
    return "config.gameconfig"

class Writer(object):
    def __init__(self, prefix=None):
        self.io = BytesIO()
        self.__indent = ''
        self.__prefix = prefix

    def getvalue(self):
        return self.io.getvalue()

    def getindent(self):
        return self.__indent

    def __enter__(self):
        self.__indent += INDENT
        return self

    def __exit__(self, type, value, trackback):
        self.__indent = self.__indent[:-INDENT_LEN]

    def __call__(self, data):
        self.io.write(str.encode(self.__indent))
        if self.__prefix:
            self.io.write(self.__prefix)        
        if isinstance(data,str):
            self.io.write(str.encode(data))
        else:
            self.io.write(data)

def addHepler(name):

    s = "local data = { Items = items, reloaddata = true, SortedItems = sortedItems}\n"
    s += "function data:get(id)\n"
    s += "    return self.Items[id] or self.Items[tostring(id)]\n"
    s += "end\n"
    s += "return data\n"
    
    return s

def write_header(writer):
    writer("""-- Generated By Tool Do not Edit\n""")

def is_valid_name(word):
    return all(ord(c) < 128 for c in word)

def is_skip( scheme ) :
    if operator.eq( scheme, '' ):
        return True
    elif operator.eq( scheme, '$' ):
        return True
    elif operator.eq( scheme.upper(), 'SKIP' ):
        return True
    return False

def try_fromat_int( data ) :
    try:
        if type(data) == type(list()):
            for i in range(len(data)):
                data[i] = try_fromat_int(data[i])
            return data

        array_value = eval(data)
        return array_value
    except:
        a_int_value = 0
        try:
            a_int_value = int(float(data))
        except:
            return 0
        return a_int_value
        
    return 0

def try_fromat_float( data ) :
    try:
        if type(data) == type(list()):
            for i in range(len(data)):
                data[i] = try_fromat_float(data[i])
            return data

        array_value = eval(data)
        return array_value
    except:
        a_int_value = 0.0
        try:
            a_int_value = float(data)
        except:
            return 0.0
        return a_int_value
        
    return 0.0

def try_format_string( data ) :
    if type(data) == type(1.0):
        data = int(float(data))

    try:
        if type(data) == type(list()):
            for i in range(len(data)):
                data[i] = try_format_string(data[i])
            return data

        if not data.find('[') == -1:
            array_value = eval(data)
            return array_value
        else:
            try:
                a_str_value = str(data)
                return a_str_value
            except:
                pass
    except:
        a_str_value = ''
        try:
            a_str_value = str(data)
            return a_str_value
        except:
            pass
    return data

def try_format_array( data ) :
    try:
        if type(data) == type(list()):
            return data
        else:
            array_value = eval(data)
            return array_value
    except:
        return list()

    return list()

def try_format_value( typeStr, nameStr, data ) :
    typeStrLower = typeStr.lower()
    if typeStrLower == "int" \
        or typeStrLower == "reward" \
        or typeStrLower == "long" \
        or typeStrLower == "range" \
        or typeStrLower == "fee" \
        or typeStrLower == "attr":
        return try_fromat_int(data)
    elif typeStrLower == "float":
        return try_fromat_float(data)
    elif typeStrLower == "string":
        return try_format_string(data)
    elif typeStrLower == "lang":
        return try_fromat_int(data)
    elif "array" in typeStrLower \
        or "vector" in typeStrLower :
        return try_format_array(data)
    elif typeStrLower == "robot":
        return try_fromat_int(data)

def replaceBiaodian(matched):
    return matched.group('value').replace('"', '\\"')


def code_gen_field(key, value, context):
    with context:
        if key == None :
            if type(value) == type(1):
                context('%d,'%int(value))
            elif type(value) == type(1.0):
                context('%f,'%value)
            elif type(value) == type("s"):
                context('"%s",'%(value))
            elif type(value) == type(u's'):
                context(('"%s",'%(value)).encode('utf-8'))
            elif type(value) == type(list()):
                context('{')
                for v in value:
                    code_gen_field(None, v, context)
                context('},')
        else:
            if type(value) == type(1):
                context('["%s"]=%d,'%(key,value))
            elif type(value) == type(1.0):
                context('["%s"]=%f,'%(key,value))
            elif type(value) == type("s"):
                context('["%s"]="%s",'%(key,value))
            elif type(value) == type(u's'):
                value = re.sub(r'(?P<value>[^\\]")', replaceBiaodian, (value).encode('utf-8'))
                if value.startswith('"'):
                    value = '\\' + value
                context('["%s"]="%s",'%((key).encode('utf-8'), value))
            elif type(value) == type(list()):
                context(('["%s"]={'%(key)).encode('utf-8'))
                for v in value:
                    code_gen_field(None, v, context)
                context('},')

def code_gen_datas(data_desc, config_desc, context):
    with context:
        version = data_desc.version
        key = data_desc.key
        content = data_desc.content
        types = data_desc.types
        isIntId = config_desc.key_type.lower() == "int" or config_desc.key_type.lower() == "long"
            
        if isIntId:
            key = try_fromat_int(key)
        
        haveDefault = False
        '''
        for j in range(0, len(config_desc.attrs)):
            attrs = config_desc.attrs[j]
            attr_type = attrs.type
            attr_name = attrs.name
            default = attrs.default
            if is_skip(attr_type):
                continue
            if not is_valid_name(attr_name):
                raise Exception('field_not_valid_name', config_desc.name, attr_name)
            if str(default) == str(content[j]):
                haveDefault = True
                break
        '''
        if haveDefault:
            if isIntId:
                context(('\t[%s]=setmetatable({'%key).encode('utf-8'))
            else:
                context(('\t["%s"]=setmetatable({'%key).encode('utf-8'))
        else:
            if isIntId:
                context(('\t[%s]={'%key).encode('utf-8'))
            else:
                context(('\t["%s"]={'%key).encode('utf-8'))
        
        for j in range(0, len(config_desc.attrs)):
            attrs = config_desc.attrs[j]
            attr_type = attrs.type
            attr_name = attrs.name
            default = attrs.default
            if is_skip(attr_type):
                continue
            if not is_valid_name(attr_name):
                raise Exception('field_not_valid_name', config_desc.name, attr_name)
            if types and j in types:
                attr_type = types[j]
            if haveDefault and attr_type == attrs.type and str(default) == str(content[j]):
                continue
            code_gen_field(attr_name, try_format_value(attr_type, attr_name, content[j]), context)
        if haveDefault:
            context('}, default),\n')
        else:
            context('},\n')

def code_gen_default(config_desc, context):
    with context:
        context(('local defaultData = {').encode('utf-8'))
        for j in range(0, len(config_desc.attrs)):
            attrs = config_desc.attrs[j]
            attr_type = attrs.type
            attr_name = attrs.name
            default = copy.deepcopy(attrs.default)
            if is_skip(attr_type):
                continue
            if not is_valid_name(attr_name):
                raise Exception('field_not_valid_name', config_desc.name, attr_name)
            code_gen_field(attr_name, try_format_value(attr_type, attr_name, default), context)
        context('}\n')
        context('local default = { __index = function(table, key) return defaultData[key] end}\n')

def code_gen_config(config_desc):
    print(".........gen lua " + config_desc.name + " .........")
    context = Writer()
    write_header(context)
    if not is_valid_name(config_desc.name):
        raise Exception('not_valid_name', config_desc.name)

    #code_gen_default(config_desc, context)

    with context:
        context('local items = {\n')
        for (k,v) in config_desc.attr_datas.items():
            code_gen_datas(v, config_desc, context)
        context('}\n\n\n')
        
        isIntId = config_desc.key_type.lower() == "int" or config_desc.key_type.lower() == "long"
        context('local sortedItems = {\n')
        for (k,v) in config_desc.attr_datas.items():
            if isIntId:
                context('\titems[' + str(try_fromat_int(k)) + '],\n')
            else:
                context('\titems["' + str(k) + '"],\n')
        context('}\n\n\n')
    
    context(addHepler(config_desc.name))
    context("\n")
    
    return context.getvalue()

def code_gen_file(file_desc):
    for config in file_desc.configs:
        _files[config.name] = code_gen_config(config)
#-----------------------------------------------------------------------------------------
def code_gen_all_config(all_lua_name):
    context = Writer()
    context("%s = {}\n"%(ALL_CONFIG_NAME))
    context("\n")
    for name in all_lua_name:
        context("--%s\n"%name)
        context("%s.%s = require \"%s.%s\"\n"%(ALL_CONFIG_NAME,name,dev_folder_rel(),name))
        context(addHepler(ALL_CONFIG_NAME + "." + name))
        context("\n")
    return context.getvalue()

def code_gen_version_config(all_file, md5):
    context = Writer()
    context("local %s = {}\n"%(ALL_CONFIG_NAME))
    context("\n")
    
    context("%s.configs = {"%(ALL_CONFIG_NAME))
    for file in all_file:
        context("\n\t{'config/gameconfig/%s', %s},"%(file[0], file[1]))
    context("\n}")
    
    context("\n-------------version info-----------------\n")
    
    context("%s.md5 = '%s'\n\n\n"%(ALL_CONFIG_NAME, md5))
    
    context("return %s"%(ALL_CONFIG_NAME))
    
    return context.getvalue()

def gen_code(request, response, toPath):
    print('.........start gen type : '+type_name()+'..........')
    response.mysuffix = my_suffix()
    response.mypath = my_path()

    for file_desc in request.files:
        try:
            code_gen_file(file_desc)
        except Exception as args:
            if args == 'not_valid_name':
                print('\n\n',file_desc.basename, '--' ,args[1], u"<---文件名有中文字符，请修改后再试")
            elif args == 'field_not_valid_name':
                print('\n\n',file_desc.basename, '--' ,args[1], ' -- ', args[2], u"<---导出字段名有中文字符，请修改后再试")
            raise


    for k,v in _files.items():
        print('gen code [%s] file = %s'%(type_name(), k))
        file = response.addFile()
        file.name = k + '.lua'
        file.content = v

    print('.........end gen type : '+type_name()+'............')
    
def gen_configs(request, response, toPath, md5):
    print('.........start gen type : '+type_name()+'..........', toPath)
    response.mysuffix = my_suffix()
    response.mypath = my_path()

    gen_path = toPath + my_path()
    onlyfiles = [ f for f in os.listdir(gen_path) if os.path.isfile(os.path.join(gen_path,f)) ]
    all_file = []
    for f in onlyfiles:
        if f != "GameConfigs.lua" \
            and "con_94_keyword" not in f \
            and "con_91_UIString" not in f: 
            all_file.append((os.path.splitext(f)[0], os.path.getsize(os.path.join(gen_path,f)) // 1024))
            
    all_file = sorted(all_file, key=lambda x: x[1])

    file = response.addFile()
    file.name = ALL_CONFIG_NAME + ".lua"
    file.content = code_gen_version_config(all_file, md5)